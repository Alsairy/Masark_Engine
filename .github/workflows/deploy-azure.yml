name: Deploy to Azure

on:
  workflow_run:
    workflows: ["CI/CD Pipeline"]
    types: [completed]
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  AZURE_WEBAPP_NAME: masark-engine
  AZURE_RESOURCE_GROUP: masark-rg

jobs:
  deploy-azure:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    environment: ${{ github.event.inputs.environment || 'staging' }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: dawidd6/action-download-artifact@v3
      with:
        workflow: ci-cd.yml
        name: published-app
        path: ./publish
      if: github.event_name == 'workflow_run'
        
    - name: Download build artifacts (manual dispatch)
      uses: actions/download-artifact@v4
      with:
        name: published-app
        path: ./publish
      if: github.event_name == 'workflow_dispatch'
        
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Set environment variables
      run: |
        echo "WEBAPP_NAME=${{ env.AZURE_WEBAPP_NAME }}-${{ github.event.inputs.environment || 'staging' }}" >> $GITHUB_ENV
        echo "RESOURCE_GROUP=${{ env.AZURE_RESOURCE_GROUP }}-${{ github.event.inputs.environment || 'staging' }}" >> $GITHUB_ENV
        
    - name: Create Resource Group
      run: |
        az group create --name ${{ env.RESOURCE_GROUP }} --location "East US" --tags Environment="${{ github.event.inputs.environment || 'staging' }}" Project="MasarkEngine"
      continue-on-error: true
        
    - name: Deploy ARM Template
      uses: azure/arm-deploy@v1
      with:
        subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        resourceGroupName: ${{ env.RESOURCE_GROUP }}
        template: ./deploy/azure/app-service.json
        parameters: |
          appName=${{ env.WEBAPP_NAME }}
          location=eastus
          sku=${{ github.event.inputs.environment == 'production' && 'P2v3' || 'P1v3' }}
          sqlAdministratorPassword=${{ secrets.SQL_ADMIN_PASSWORD }}
          
    - name: Get Web App Publish Profile
      id: webapp
      run: |
        PUBLISH_PROFILE=$(az webapp deployment list-publishing-profiles --name ${{ env.WEBAPP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --xml)
        echo "PUBLISH_PROFILE<<EOF" >> $GITHUB_OUTPUT
        echo "$PUBLISH_PROFILE" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
          
    - name: Deploy to Azure Web App
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.WEBAPP_NAME }}
        publish-profile: ${{ steps.webapp.outputs.PUBLISH_PROFILE }}
        package: ./publish
        
    - name: Configure App Settings
      run: |
        az webapp config appsettings set --name ${{ env.WEBAPP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --settings \
          ASPNETCORE_ENVIRONMENT="${{ github.event.inputs.environment == 'production' && 'Production' || 'Staging' }}" \
          DeploymentMode="${{ github.event.inputs.environment == 'production' && 'STANDARD' || 'MAWHIBA' }}" \
          JWT__ExpirationMinutes="60" \
          Logging__LogLevel__Default="Information" \
          Logging__LogLevel__Microsoft="Warning"
          
    - name: Restart Web App
      run: |
        az webapp restart --name ${{ env.WEBAPP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }}
        
    - name: Health Check
      run: |
        echo "Waiting for application to start..."
        sleep 60
        
        WEBAPP_URL="https://${{ env.WEBAPP_NAME }}.azurewebsites.net"
        echo "Testing health endpoint: $WEBAPP_URL/health"
        
        for i in {1..10}; do
          if curl -f -s "$WEBAPP_URL/health" > /dev/null; then
            echo "✅ Health check passed!"
            break
          else
            echo "⏳ Health check attempt $i failed, retrying in 30 seconds..."
            sleep 30
          fi
          
          if [ $i -eq 10 ]; then
            echo "❌ Health check failed after 10 attempts"
            exit 1
          fi
        done
        
    - name: Run Smoke Tests
      run: |
        WEBAPP_URL="https://${{ env.WEBAPP_NAME }}.azurewebsites.net"
        
        echo "Running smoke tests against $WEBAPP_URL"
        
        # Test API endpoints
        echo "Testing /api/system/health..."
        curl -f -s "$WEBAPP_URL/api/system/health" || exit 1
        
        echo "Testing /api/assessment/questions..."
        curl -f -s "$WEBAPP_URL/api/assessment/questions" || exit 1
        
        echo "Testing /api/careers/clusters..."
        curl -f -s "$WEBAPP_URL/api/careers/clusters" || exit 1
        
        echo "✅ All smoke tests passed!"
        
    - name: Update Deployment Status
      if: always()
      run: |
        WEBAPP_URL="https://${{ env.WEBAPP_NAME }}.azurewebsites.net"
        STATUS="${{ job.status }}"
        
        echo "## 🚀 Azure Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment**: ${{ github.event.inputs.environment || 'staging' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Resource Group**: ${{ env.RESOURCE_GROUP }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Web App**: ${{ env.WEBAPP_NAME }}" >> $GITHUB_STEP_SUMMARY
        echo "- **URL**: [$WEBAPP_URL]($WEBAPP_URL)" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: $STATUS" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        
        if [ "$STATUS" = "success" ]; then
          echo "- **Health Check**: ✅ Passed" >> $GITHUB_STEP_SUMMARY
          echo "- **Smoke Tests**: ✅ Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "- **Health Check**: ❌ Failed" >> $GITHUB_STEP_SUMMARY
          echo "- **Smoke Tests**: ❌ Failed" >> $GITHUB_STEP_SUMMARY
        fi

  cleanup-old-deployments:
    runs-on: ubuntu-latest
    needs: deploy-azure
    if: success() && github.event.inputs.environment == 'staging'
    
    steps:
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Cleanup Old Staging Deployments
      run: |
        echo "Cleaning up old staging deployments..."
        
        # Keep only the last 3 staging deployments
        RESOURCE_GROUPS=$(az group list --query "[?starts_with(name, 'masark-rg-staging')].name" -o tsv | sort -r | tail -n +4)
        
        for RG in $RESOURCE_GROUPS; do
          echo "Deleting old resource group: $RG"
          az group delete --name "$RG" --yes --no-wait
        done
        
        echo "Cleanup completed!"
