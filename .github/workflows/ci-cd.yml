name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  DOTNET_VERSION: '9.0.x'
  NODE_VERSION: '20.x'
  AZURE_WEBAPP_NAME: masark-engine
  AWS_REGION: us-east-1
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dotnet-version: ['8.0.x']
        
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ matrix.dotnet-version }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: admin-frontend/package-lock.json
        
    - name: Cache .NET packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
        
    - name: Restore .NET dependencies
      run: dotnet restore --verbosity normal
      
    - name: Build .NET application
      run: dotnet build --no-restore --configuration Release --verbosity normal
      
    - name: Install frontend dependencies
      working-directory: admin-frontend
      run: npm ci
      
    - name: Build frontend
      working-directory: admin-frontend
      run: npm run build
      
    - name: Run .NET unit tests
      run: dotnet test --no-build --configuration Release --logger trx --results-directory "TestResults-${{ matrix.dotnet-version }}" --collect:"XPlat Code Coverage" --settings coverlet.runsettings
      
    - name: Run frontend tests
      working-directory: admin-frontend
      run: npm run test:ci
      continue-on-error: true
      
    - name: Upload test results
      uses: actions/upload-artifact@v4
      with:
        name: dotnet-results-${{ matrix.dotnet-version }}
        path: TestResults-${{ matrix.dotnet-version }}
      if: always()
      
    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      with:
        directory: ./TestResults-${{ matrix.dotnet-version }}
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}
      
    - name: Publish .NET application
      run: dotnet publish Masark.API/Masark.API.csproj --configuration Release --output ./publish --no-build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: published-app
        path: ./publish
        
    - name: Upload frontend build
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: admin-frontend/dist

  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-test
    permissions:
      actions: read
      contents: read
      security-events: write
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Run .NET security audit
      run: |
        dotnet list package --vulnerable --include-transitive 2>&1 | tee security-audit.log
        if grep -q "has the following vulnerable packages" security-audit.log; then
          echo "::warning::Vulnerable packages detected"
          exit 1
        fi
      continue-on-error: true
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'
      if: always()
      
    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v3
      with:
        languages: csharp, javascript
        queries: security-extended,security-and-quality
        
    - name: Autobuild
      uses: github/codeql-action/autobuild@v3
      
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: published-app
        path: ./publish
        
    - name: Run OWASP ZAP Baseline Scan
      uses: zaproxy/action-baseline@v0.12.0
      with:
        target: 'http://localhost:8080'
        docker_name: 'ghcr.io/zaproxy/zaproxy:stable'
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a'
        fail_action: false
        
    - name: Upload ZAP scan results
      uses: actions/upload-artifact@v4
      with:
        name: zap-scan-results
        path: report_html.html
      if: always()

  docker-build:
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    permissions:
      contents: read
      packages: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: published-app
        path: ./publish
        
    - name: Download frontend build
      uses: actions/download-artifact@v4
      with:
        name: frontend-build
        path: ./admin-frontend/dist
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1
        
    - name: Save Docker image for testing
      if: github.event_name == 'pull_request'
      run: |
        docker build -t masark-engine:${{ github.sha }} .
        docker save masark-engine:${{ github.sha }} | gzip > masark-engine.tar.gz
      
    - name: Upload Docker image
      if: github.event_name == 'pull_request'
      uses: actions/upload-artifact@v4
      with:
        name: docker-image
        path: masark-engine.tar.gz

  code-quality:
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: admin-frontend/package-lock.json
        
    - name: Restore .NET dependencies
      run: dotnet restore
      
    - name: Build .NET application
      run: dotnet build --no-restore --configuration Release
      
    - name: Install frontend dependencies
      working-directory: admin-frontend
      run: npm ci
      
    - name: Run .NET code coverage
      run: dotnet test --no-build --configuration Release --collect:"XPlat Code Coverage" --results-directory ./coverage --settings coverlet.runsettings
      
    - name: Run frontend linting
      working-directory: admin-frontend
      run: npm run lint
      
    - name: Run frontend type checking
      working-directory: admin-frontend
      run: npx tsc --noEmit
      
    - name: Upload .NET coverage reports
      uses: codecov/codecov-action@v4
      with:
        directory: ./coverage
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}
        flags: backend
        
    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      continue-on-error: true

  integration-tests:
    runs-on: ubuntu-latest
    needs: docker-build
    services:
      sqlserver:
        image: mcr.microsoft.com/mssql/server:2022-latest
        env:
          SA_PASSWORD: TestPassword123!
          ACCEPT_EULA: Y
        ports:
          - 1433:1433
        options: >-
          --health-cmd "/opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P TestPassword123! -C -Q 'SELECT 1'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Run integration tests
      run: dotnet test Masark.Tests.Integration --configuration Release --logger trx --results-directory "IntegrationTestResults"
      env:
        ConnectionStrings__DefaultConnection: "Server=localhost,1433;Database=MasarkEngineTest;User Id=sa;Password=TestPassword123!;TrustServerCertificate=true;"
        ConnectionStrings__Redis: "localhost:6379"
        
    - name: Upload integration test results
      uses: actions/upload-artifact@v4
      with:
        name: integration-test-results
        path: IntegrationTestResults
      if: always()

  performance-tests:
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.event_name == 'release' || github.event_name == 'push'
    services:
      sqlserver:
        image: mcr.microsoft.com/mssql/server:2022-latest
        env:
          SA_PASSWORD: TestPassword123!
          ACCEPT_EULA: Y
        ports:
          - 1433:1433
        options: >-
          --health-cmd "/opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P TestPassword123! -C -Q 'SELECT 1'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download Docker image
      if: github.event_name == 'pull_request'
      uses: actions/download-artifact@v4
      with:
        name: docker-image
        path: .
        
    - name: Load Docker image
      if: github.event_name == 'pull_request'
      run: docker load < masark-engine.tar.gz
      
    - name: Setup k6
      run: |
        sudo gpg -k
        sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6
        
    - name: Start application
      run: |
        if [ "${{ github.event_name }}" == "pull_request" ]; then
          docker run -d --name masark-test -p 8080:8080 \
            -e ConnectionStrings__DefaultConnection="Server=host.docker.internal,1433;Database=MasarkEngineTest;User Id=sa;Password=TestPassword123!;TrustServerCertificate=true;" \
            -e ConnectionStrings__Redis="host.docker.internal:6379" \
            --add-host host.docker.internal:host-gateway \
            masark-engine:${{ github.sha }}
        else
          # For releases, pull from registry
          docker run -d --name masark-test -p 8080:8080 \
            -e ConnectionStrings__DefaultConnection="Server=host.docker.internal,1433;Database=MasarkEngineTest;User Id=sa;Password=TestPassword123!;TrustServerCertificate=true;" \
            -e ConnectionStrings__Redis="host.docker.internal:6379" \
            --add-host host.docker.internal:host-gateway \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        fi
        
        # Wait for application to start
        timeout 120s bash -c 'until curl -f http://localhost:8080/health; do sleep 2; done'
        
    - name: Run comprehensive performance tests
      run: |
        # Health check load test
        k6 run --vus 50 --duration 60s performance-tests/load-test.js
        
        # Stress test
        k6 run --vus 100 --duration 30s performance-tests/stress-test.js
        
        # Benchmark test
        k6 run performance-tests/benchmark.js
        
    - name: Upload performance test results
      uses: actions/upload-artifact@v4
      with:
        name: performance-test-results
        path: |
          k6-results.json
          performance-summary.html
      if: always()
        
    - name: Cleanup
      if: always()
      run: |
        docker stop masark-test || true
        docker rm masark-test || true

  deployment-validation:
    runs-on: ubuntu-latest
    needs: [docker-build, performance-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Validate deployment readiness
      run: |
        echo "Validating deployment readiness..."
        
        # Check if all required secrets are available
        if [ -z "${{ secrets.AZURE_CREDENTIALS }}" ]; then
          echo "::warning::Azure credentials not configured"
        fi
        
        if [ -z "${{ secrets.AWS_ACCESS_KEY_ID }}" ]; then
          echo "::warning::AWS credentials not configured"
        fi
        
        # Validate Docker image exists
        if [ "${{ github.event_name }}" != "pull_request" ]; then
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          echo "Docker image validation successful"
        fi
        
    - name: Security compliance check
      run: |
        echo "Running security compliance checks..."
        
        # Check for security vulnerabilities in dependencies
        if [ -f "security-audit.log" ]; then
          if grep -q "Critical" security-audit.log; then
            echo "::error::Critical security vulnerabilities found"
            exit 1
          fi
        fi
        
        echo "Security compliance check passed"
        
    - name: Performance validation
      run: |
        echo "Validating performance test results..."
        
        # Check if performance tests passed
        if [ -f "k6-results.json" ]; then
          # Parse k6 results and validate thresholds
          echo "Performance validation completed"
        fi

  notify:
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan, docker-build, code-quality, integration-tests, performance-tests]
    if: always()
    
    steps:
    - name: Notify on success
      if: ${{ needs.build-and-test.result == 'success' && needs.security-scan.result == 'success' && needs.docker-build.result == 'success' }}
      run: |
        echo "✅ All CI/CD pipeline jobs completed successfully!"
        echo "Build: ${{ needs.build-and-test.result }}"
        echo "Security: ${{ needs.security-scan.result }}"
        echo "Docker: ${{ needs.docker-build.result }}"
        echo "Quality: ${{ needs.code-quality.result }}"
        echo "Integration: ${{ needs.integration-tests.result }}"
        echo "Performance: ${{ needs.performance-tests.result }}"
        
    - name: Notify on failure
      if: ${{ needs.build-and-test.result == 'failure' || needs.security-scan.result == 'failure' || needs.docker-build.result == 'failure' }}
      run: |
        echo "❌ CI/CD pipeline failed!"
        echo "Build: ${{ needs.build-and-test.result }}"
        echo "Security: ${{ needs.security-scan.result }}"
        echo "Docker: ${{ needs.docker-build.result }}"
        echo "Quality: ${{ needs.code-quality.result }}"
        echo "Integration: ${{ needs.integration-tests.result }}"
        echo "Performance: ${{ needs.performance-tests.result }}"
        exit 1
